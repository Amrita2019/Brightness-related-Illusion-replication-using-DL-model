from __future__ import print_function
from keras.preprocessing.image import ImageDataGenerator
import numpy as np 
import os
import glob
import skimage.io as io
import skimage.transform as trans
from skimage import img_as_ubyte
from PIL import Image
import sys
import tensorflow as tf

#convert an image into normalized form
def adjustData(img,mask,num_class,flag_multi_class = False):
  img = img / 255
  mask = mask /255
  mask[mask > 0.5] = 1
  mask[mask <= 0.5] = 0
  return (img,mask)

#training data augmentation
def trainGenerator(batch_size,train_path,image_folder,mask_folder,aug_dict,image_color_mode = "grayscale",
                    mask_color_mode = "grayscale",image_save_prefix  = "image",mask_save_prefix  = "mask",
                    flag_multi_class = False,num_class = 2,save_to_dir = None,target_size = (256,256),seed = 1):
    '''
    can generate image and mask at the same time
    use the same seed for image_datagen and mask_datagen to ensure the transformation for image and mask is the same
    if you want to visualize the results of generator, set save_to_dir = "your path"
    '''
    image_datagen = ImageDataGenerator(**aug_dict)
    mask_datagen = ImageDataGenerator(**aug_dict)
    image_generator = image_datagen.flow_from_directory(
        train_path,
        classes = [image_folder],
        class_mode = None,
        color_mode = image_color_mode,
        target_size = target_size,
        batch_size = batch_size,
        save_to_dir = save_to_dir,
        save_prefix  = image_save_prefix,
        seed = seed)
    mask_generator = mask_datagen.flow_from_directory(
        train_path,
        classes = [mask_folder],
        class_mode = None,
        color_mode = mask_color_mode,
        target_size = target_size,
        batch_size = batch_size,
        save_to_dir = save_to_dir,
        save_prefix  = mask_save_prefix,
        seed = seed)
    train_generator = zip(image_generator, mask_generator)
    print(train_generator)
    for (img,mask) in train_generator:
        img,mask = adjustData(img,mask,num_class,flag_multi_class)
        yield (img,mask)

#test data preprocessing
def testGenerator(test_path,num_image = 70,target_size = (256,256),flag_multi_class = False,as_gray = True):
    for i in range(num_image):
        img = io.imread(os.path.join(test_path,"%d.png"%i)) #[:,:,1]
        #img = Image.open(os.path.join(test_path,"%d.png"%i))
        img = img / 255
        img = trans.resize(img,target_size)
        img = np.reshape(img,img.shape+(1,)) if (not flag_multi_class) else img
        img = np.reshape(img,(1,)+img.shape)
        yield img

#training data preprocessing then calling adjustData() function
def geneTrainNpy(image_path,mask_path,flag_multi_class = False,num_class = 2,image_prefix = "image",mask_prefix = "mask",image_as_gray = True,mask_as_gray = True):
    image_name_arr = glob.glob(os.path.join(image_path,"%s*.png"%image_prefix))
    image_arr = []
    mask_arr = []
    for index,item in enumerate(image_name_arr):
        img = io.imread(item,as_gray = image_as_gray)
        img = np.reshape(img,img.shape + (1,)) if image_as_gray else img
        mask = io.imread(item.replace(image_path,mask_path).replace(image_prefix,mask_prefix),as_gray = mask_as_gray)
        mask = np.reshape(mask,mask.shape + (1,)) if mask_as_gray else mask
        img,mask = adjustData(img,mask,flag_multi_class,num_class)
        image_arr.append(img)
        mask_arr.append(mask)
    image_arr = np.array(image_arr)
    mask_arr = np.array(mask_arr)
    return image_arr,mask_arr


def labelVisualize(num_class,color_dict,img):
    img = img[:,:,0] if len(img.shape) == 3 else img
    img_out = np.zeros(img.shape + (3,))
    for i in range(num_class):
        img_out[img == i,:] = color_dict[i]
    return img_out / 255

#saving predicted image files inside each test folder
def saveResult(save_path,npyfile,flag_multi_class = False,num_class = 2):
    for i,item in enumerate(npyfile):
        img = labelVisualize(num_class,COLOR_DICT,item) if flag_multi_class else item[:,:,0]
        #io.imsave(os.path.join(save_path,"%d_predict.png"%i),img)
        io.imsave(os.path.join(save_path,"%d_predict.png"%i),img_as_ubyte(img))
import numpy as np 
import os
import skimage.io as io
import skimage.transform as trans
import numpy as np
from keras.models import *
from keras.layers import *
from keras.optimizers import *
from keras.callbacks import ModelCheckpoint, LearningRateScheduler
from keras import backend as keras

def cnn(pretrained_weights = None,input_size = (256,256,1)): #skip_wt, 
  # Down-sampling Pathway
  filt_sz=3
  inputs = Input(input_size)
  

  conv1 = Conv2D(8, filt_sz, activation = 'sigmoid', padding = 'same', kernel_initializer = 'he_normal')(inputs)
  
  conv2 = Conv2D(8, filt_sz, activation = 'sigmoid', padding = 'same', kernel_initializer = 'he_normal')(conv1)


  conv2 = Conv2D(1, 1, activation = 'sigmoid')(conv2)
  
  #pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)
  #conv2 = Conv2D(128, filt_sz, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(pool1)
  #pool2_1 = MaxPooling2D(pool_size=(2, 2))(conv2)
  #conv2 = Conv2D(128, filt_sz, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(pool2_1)
  
  #pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)
  #conv3 = Conv2D(256, filt_sz, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(pool2)
  #pool3_1 = MaxPooling2D(pool_size=(2, 2))(conv3)
  #conv3 = Conv2D(256, filt_sz, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(pool3_1)
  
  #pool3 = MaxPooling2D(pool_size=(2, 2))(conv3)
  #conv4 = Conv2D(512, filt_sz, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(pool3)
  #pool4_1 = MaxPooling2D(pool_size=(2, 2))(conv4)
  #conv4 = Conv2D(512, filt_sz, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(pool4_1)
  
  #drop4 = Dropout(0.5)(conv4)
  #pool4 = MaxPooling2D(pool_size=(2, 2))(drop4)

  
  #conv5 = Conv2D(1024, filt_sz, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(pool4)
  #pool5_1 = MaxPooling2D(pool_size=(2, 2))(conv5)
  #conv5 = Conv2D(1024, filt_sz, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(pool5_1)

  #drop5 = Dropout(0.5)(conv5) 
  #pool5 = MaxPooling2D(pool_size=(2, 2))(drop5)

  #conv6 = Conv2D(2, filt_sz, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(pool5)

  #conv7 = Conv2D(1, 1, activation = 'sigmoid')(conv6)
  
  
  
  # Up-sampling Pathway
  #up6 = Conv2D(512, 2, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(UpSampling2D(size = (2,2))(drop5))
  #merge6 = skip_wt*concatenate([drop4,up6], axis = 3)
  #conv6 = Conv2D(512, filt_sz, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(up6)
  #conv6 = Conv2D(512, filt_sz, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(conv6)
  
  
  #up7 = Conv2D(256, 2, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(UpSampling2D(size = (2,2))(conv6))
  #merge7 = skip_wt*concatenate([conv3,up7], axis = 3)
  #conv7 = Conv2D(256, filt_sz, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(up7)
  #conv7 = Conv2D(256, filt_sz, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(conv7)
  
  
  #up8 = Conv2D(128, 2, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(UpSampling2D(size = (2,2))(conv7))
  #merge8 = skip_wt*concatenate([conv2,up8], axis = 3)
  #conv8 = Conv2D(128, filt_sz, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(up8)
  #conv8 = Conv2D(128, filt_sz, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(conv8)
  
  
  #up9 = Conv2D(64, 2, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(UpSampling2D(size = (2,2))(conv8))
  #merge9 = skip_wt*concatenate([conv1,up9], axis = 3)
  #conv9 = Conv2D(64, filt_sz, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(up9)
  #conv9 = Conv2D(64, filt_sz, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(conv9)
  #conv9 = Conv2D(2, filt_sz, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(conv9)
  #conv10 = Conv2D(1, 1, activation = 'sigmoid')(conv9)
  
  model = Model(inputs, conv2)
  
  model.compile(optimizer = tf.keras.optimizers.Adam(learning_rate = 1e-4), loss = 'mse', metrics = ['accuracy']) #binary_crossentropy
  
  if(pretrained_weights):
    model.load_weights(pretrained_weights)
    
  return model
for sk in range(2,3):
  data_gen_args = dict(rotation_range=0.2,
                    width_shift_range=0.02,
                    height_shift_range=0.02,
                    shear_range=0.02,
                    zoom_range=0.02,
                    horizontal_flip=True,
                    fill_mode='nearest')
  myGene = trainGenerator(2,'sample_data','image','label',data_gen_args,save_to_dir = None)
  model = cnn() # Passing the weights of skip connection
  model_checkpoint = ModelCheckpoint('filename.hdf5', monitor='loss',verbose=1, save_best_only=True)
  model.fit(myGene,steps_per_epoch=300,epochs=100,callbacks=[model_checkpoint])
  test_path = "sample_data/test"
  testGene = testGenerator(test_path)
  results = model.predict_generator(testGene,21,verbose=1) #12: Number of image files in each test folder
  saveResult(test_path,results)
